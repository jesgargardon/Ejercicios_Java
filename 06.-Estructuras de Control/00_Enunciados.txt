Ejercicio 1
-----------
Escribe un programa Java que dibuje los números del 1 al 100 que sean divisibles por 3
Ejercicio 2
-----------
Escribe un programa que solicite al usuario un número entero positivo N y calcule la suma de los primeros N números naturales. Por ejemplo:
•	Número introducido: 6
•	Resultado = 21"
Ejercicio 3
-----------
Desarrolla un programa java que pida al usuario que introduzca un número entero que este entre 1 y 9. Y dibuja por pantalla la tabla de multiplicar de dicho número. No es necesario que el programa comprueba si el número introducido está dentro del rango admitido.
Ejercicio 4
-----------
Crea un programa que dibuje en la pantalla las tablas de multiplicar del 1 al 10.
Ejercicio 5
-----------
Realiza un programa que pida al usuario que introduzca dos números enteros y muestre la suma de todos los números pares en ese rango, incluidos los números introducidos. El programa debe funcionar con independencia de si se introduce primero el número mayor o el menor. Por ejemplo: 
•	números introducidos = 2 y 8
•	Resultado = 20"
Ejercicio 6
-----------
Realiza un programa que pida al usuario que introduzca por teclado el número de alumnos en clase. Usando el número introducido por el usuario, el programa pedirá al usuario que introduzca los nombres de los alumnos.
Ten en cuenta que el programa tiene que pedir tantas introducciones de nombres, como alumnos haya en clase. Una vez introducidos todos los nombres de los alumnos el programa termina presentando el mensaje: ""Han sido introducidos los nombres de <número de alumnos> alumnos""
Lógicamente, en <número de alumnos> tienes que presentar el valor numérico del número de alumnos. Y presentar por pantalla, la lista de los nombres de los alumnos, uno por línea."
Ejercicio 7
-----------
Realiza un programa para introducir las notas de un examen. El usuario del programa tiene que indicar el número de alumnos que se han presentado al examen. Posteriormente el usuario tendrá que introducir las notas obtenidas de todos los alumnos, no será necesario introducir el nombre del alumno, solamente la nota.El programa tiene que presentar por pantalla, el número de alumnos aprobados (que han obtenido un 5 o superior), el número de alumnos suspendidos (nota inferior a 5) y la media de las notas.
NOTA: Por simplificar, se puede asumir que las notas son enteros, no hay decimales"
Ejercicio 8
-----------
Realizar un programa que pida de manera interrumpida al usuario que introduzca un número entero positivo. El programa dejara de pedir al usuario que introduzca un número cuando el número introducido sea el cero. Pintar por pantalla los números introducidos y sus cuadrados.
Ejercicio 9
-----------
Codifica un programa que pida al usuario que introduzca un número entre 1 y 1000, e imprima todos los divisores exactos de ese número. Por ejemplo, si el número introducido por el usuario fuera 170, el resultado debería ser algo similar a:
Por favor, introduce un numero entre 1 y 1000
170
El numero 170 es divisible por 1
El numero 170 es divisible por 2
El numero 170 es divisible por 5
El numero 170 es divisible por 10
El numero 170 es divisible por 17
El numero 170 es divisible por 34
El numero 170 es divisible por 85
El numero 170 es divisible por 170"
Ejercicio 10
-----------
Crea un programa que dibuje por pantalla si un estudiante ha aprobado o no la asignatura de matemáticas. Tienes que usar las siguientes variables:
- notaExamen: de tipo double y que representa el 60% de la nota final.
- notaTrabajoGrupo: de tipo double y que representa el 40% de la nota final.
- ratioAsistencia: tipo Boolean que indica si el estudiante cumple con el mínimo de asistencia requerido.
Los valores de estas variables estarán hardcodeados.Puedes usar otras variables si lo estimas oportuno.Las condiciones para aprobar la asignatura son:
- Conseguir una media de las dos notas, igual o superior a 5, considerando los pesos de ambas notas.
- Cumplir con el ratio mínimo de asistencia requerido."
Ejercicio 11
------------
Realiza un programa que pregunte a un usuario su edad. Entonces, otro usuario tendrá que acertar la edad del primero.
Para ello, el programa pregunta al segundo usuario la edad del primero de manera indefinida hasta que lo acierte, sin límites de intentos. Tras cada introducción, el programa tiene que indicar si el número introducido es mayor o menor que la edad del primer usuario. Cuando se acierte, se presenta un texto diciendo que se ha acertado y el número de intentos que se han necesitado.
Ejercicio 12
------------
Realiza un programa en el que el usuario tendrá que acertar un número entre 1 y 1000. Dicho número está hardcodeado en la variable valor.
El usuario tiene que introducir un número entre 1 y 1000 por teclado. No es necesario comprobar que el usuario introduce el número correctamente.
El número de intentos para acertar es ilimitado, y el programa seguirá pidiéndole al usuario que introduzca un número hasta que este acierte. Sólo en esa situación el programa termina.
Tras cada introducción, el programa tiene que indicar los intentos que lleva el usuario y si el número introducido es mayor o menor que el valor que hay que acertar.
Cuando se acierte, se presenta un texto diciendo que se ha acertado y el número de intentos que se han necesitado.
Ejercicio 13
------------
Escribe un programa Java que pida al usuario que introduzca una password numérica, de valor comprendido entre 0 y 999 (no es necesario comprobar que el valor introducido por el usuario está en dicho rango, se supone que el usuario lo hace bien).
El programa tiene almacenado el valor de la password correcta en una variable llamada key (hardcodeada). El objetivo del usuario es introducir la password correcta, en cuyo caso el programa debe imprimir el mensaje: “acceso autorizado”.
El usuario tiene un máximo de 3 intentos para introducir la password correcta. Si el usuario falla en sus tres intentos, el programa presentará el mensaje de: “Ha excedido el número de intentos permitidos” y acaba el programa.
El máximo número de intentos permitidos lo guardamos en una variable tipo int, con su valor hardcodeado. Puedes usar las variables adicionales que estimes oportunas."
Ejercicio 14
------------
Codificar un programa Java que solicita al usuario la introducción de una nueva contraseña.
Para ser segura, la contraseña debe tener más de 7 caracteres. Si la longitud de la nueva contraseña es inferior a ocho, debe solicitar de nuevo al usuarioque introduzca una nueva contraseña con más de siete caracteres. (Nótese que 7 caracteres no es suficiente).
Una vez introducida la nueva contraseña, se pide al usuario que la introduzca de nuevo. A continuación, el programa comprueba si la contraseña introducida es la misma que la nueva contraseña introducida la primera vez por el usuario. Si ambos son iguales, imprima un mensaje en la pantalla que diga: ""Su contraseña se ha cambiado con exito"". Si ambos son diferentes se vuelve a pedir al usuario que introduzca de nuevo la segunda contraseña. 
El usuario tiene 3 intentos para introducir la contraseña igual a la nueva contraseña introducida al principio. Si el usuario falla todos los intentos, debe imprimir un mensaje en la pantalla que diga:  "Lo sentimos, ha superado el número de intentos para cambiar la contraseña. Inténtelo de nuevo después de 5 minutos" y finaliza el programa."
Ejercicio 15
------------
Realiza un programa para adivinar una palabra secreta. Dicha palabra estará hardcodeada en el código. El programa pide al usuario repetidamente que introduzca una palabra hasta que acierte. A cada fallo, el programa da una pista que consiste en mostrar por pantalla la longitud de la palabra y las letras correctas hasta la primera letra incorrecta.
Un ejemplo de ejecución, para la palabra secreta: “cable” sería:
Adivina la palabra secreta:
Introduzca una palabra: casa
Pista: La palabra tiene 5 letras. Correctas: ca
Introduzca una palabra: cabra
Pista: La palabra tiene 5 letras. Correctas: cab
Introduzca una palabra: cabal
Pista: La palabra tiene 5 letras. Correctas: cab
Introduzca una palabra: cable
¡Correcto! Has adivinado la palabra secreta.
