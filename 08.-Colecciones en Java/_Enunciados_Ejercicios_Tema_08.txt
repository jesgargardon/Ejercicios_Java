Ejercicio 1
-----------
Crea una lista de todos los números del 1 a 100 que sean divisibles por un número que introduzca el usuario. Este número tiene que estar comprendido entre 2 y 7. Pinta la lista por pantalla.
Ejercicio 2
-----------
Crea una lista de enteros que tenga 10 números. La lista estará hardcodeada, con los números que quieras.
El programa tiene que ordenar la lista y presentarla por pantalla.
Luego pide al usuario que introduzca un límite inferior y otro superior. Entonces el programa elimina todos los elementos de la lista que estén fuera de los límites, incluyendo estos. Y presenta los resultados por pantalla.
Ejercicio 3
-----------
Tenemos un taller de reparación de coches y queremos realizar un programa con el que gestionar los coches que entran, salen y están en el taller.
Los datos de cada coche que queremos registrar son: propietario, matricula, marca y si está reparado.
Las opciones que queremos dar son:
1.- Entrada nueva reparación: Se registran todos los datos del coche que se recepciona. Se recepciona como reparado = false
2.- Salida de coche reparado: Se busca el coche en el taller por el nombre de propietario. Localizado el coche, se cambia a reparado = true y se entrega al propietario, saliendo del taller
3.- Listado de vehículos: Se listan todos los vehículos en el taller, mostrando todos los parámetros
4.- Salir: salir del programa
Ejercicio 4
-----------
Imagina que estás desarrollando un sistema de gestión de reservas de un hotel. Dicho hotel tiene 50 habitaciones, numeradas del 1 al 50.
El sistema debe permitir al usuario realizar las siguientes acciones:
1.	Agregar una nueva reserva: El usuario debe poder ingresar los detalles de la reserva que son: Cliente, número de habitación y número de días de la reserva. Lógicamente no se puede reservar una habitación que ya este reservada.
2.	Eliminar una reserva del sistema: El usuario puede buscar una reserva por el cliente que la realizo y eliminarla. Al eliminarla se libera la habitación que podría ser asignada a otro cliente.
3.	Listado de reservas: Listado de todas las reservas que hay con sus detalles.
4.	Reporte de número de habitaciones: Indicar por pantallas el número de habitaciones reservadas y el número de habitaciones libres.
5.	Salir del programa: El usuario puede salir del sistema.
Ejercicio 5
-----------
Desarrolla un sistema de gestión de una galería de arte que permita al usuario realizar las siguientes acciones:
1.	Agregar una nueva obra de arte al sistema: El usuario debe poder ingresar los detalles de la obra de arte, que son: título, artista, año de creación y precio.
2.	Eliminar una obra de arte del sistema: El usuario puede buscar una obra de arte por su título y eliminarla del sistema.
3.	Actualizar el precio de una obra de arte en el sistema: El usuario puede buscar una obra de arte por su título y actualizar el precio de la obra.
4.	Listar todas las obras de arte en el sistema: El programa debe mostrar un listado de todas las obras de arte en el sistema, incluyendo su título, artista, año de creación y precio.
5.	Salir del programa: El usuario puede salir del sistema.
Al agregar una nueva obra de arte, el sistema debe verificar si ya existe una obra de arte con el mismo título en el sistema. Si es así, debe actualizar la información de la obra existente en lugar de agregar una nueva.
Al actualizar el precio de una obra de arte, el sistema debe verificar si la obra existe y permitir al usuario ingresar el nuevo precio de la obra.
Ejercicio 6
-----------
Crea un programa Java que gestione una lista de tareas. El programa debe proporcionar las siguientes opciones:
1.- Dar de alta una tarea nueva: La información que hay que almacenar para una tarea es: id, descripción, responsable y estado. Para la información de estado tenemos dos estados posibles: abierto y cerrado, y el programa no debe admitir que se introduzca un valor distinto de estos.
2.- Borra una tarea: se busca la tarea por id
3.- Cambiar responsable de una tarea
4.- Listado de tareas abiertas
5.- Listado de tareas cerradas.
6.- Salir
Ejercicio 7
-----------
Imagina que estás desarrollando un sistema de gestión de cursos en línea. El sistema debe permitir al usuario realizar las siguientes acciones:
1.	Agregar un nuevo curso al sistema: El usuario debe poder ingresar los detalles del curso, que son: nombre del curso, instructor, categoría y precio.
2.	Eliminar un curso del sistema: El usuario puede buscar un curso por su nombre y eliminarlo del sistema.
3.	Actualizar el precio de un curso en el sistema: El usuario puede buscar un curso por su nombre y actualizar el precio del curso.
4.	Listar todos los cursos en el sistema: El programa debe mostrar un listado de todos los cursos en el sistema, incluyendo su nombre, instructor, categoría y precio.
5.	Salir del programa: El usuario puede salir del sistema.
Para trabajar con el sistema de cursos en línea, se deben seguir las siguientes reglas:
•	Cuando se agrega un nuevo curso, el sistema debe verificar si ya existe un curso con el mismo nombre en el sistema. Si es así, debe actualizar la información del curso existente en lugar de agregar uno nuevo.
•	Cuando se actualiza el precio de un curso en el sistema, el sistema debe verificar si el curso existe y permitir al usuario ingresar el nuevo precio del curso."
Ejercicio 8
-----------
Desarrolla un sistema de gestión de mascotas en una tienda de animales que permita al usuario realizar las siguientes acciones:
1.	Agregar una nueva mascota al sistema: El usuario debe poder ingresar los detalles de la mascota, que son: nombre, especie, raza y precio.
2.	Eliminar una mascota del sistema: El usuario puede buscar una mascota por su nombre y eliminarla del sistema.
3.	Actualizar el precio de una mascota en el sistema: El usuario puede buscar una mascota por su nombre y actualizar el precio de la mascota.
4.	Listar todas las mascotas en el sistema: El programa debe mostrar un listado de todas las mascotas en el sistema, incluyendo su nombre, especie, raza y precio.
5.	Salir del programa: El usuario puede salir del sistema.
Al agregar una nueva mascota, el sistema debe verificar si ya existe una mascota con el mismo nombre en el sistema. Si es así, debe actualizar la información de la mascota existente en lugar de agregar una nueva.
Al actualizar el precio de una mascota, el sistema debe verificar si la mascota existe y permitir al usuario ingresar el nuevo precio de la mascota.


